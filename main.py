import logging
import os
import requests
import base64
import json
import time
from datetime import datetime, timedelta
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.request import HTTPXRequest
from flask import Flask
from threading import Thread
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω—ã API
API_TOKEN = "7953823124:AAEvTebtGxiyQ-S1Sb6KUOVMhsX5JQPgoxo"
KANDINSKY_API_KEY = "637F66C7FEFC4490519D2AFC3BD96BBE"
KANDINSKY_SECRET_KEY = "492EA9669523F2EF2F083B6D3E532576"
KANDINSKY_API_URL = "https://api-key.fusionbrain.ai/"
FLUX_API_URL = "https://api-inference.huggingface.co/models/"
HUGGINGFACE_API_TOKEN = "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"

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
MODELS = {
    "flux_dev": "black-forest-labs/FLUX.1-dev",
    "flux_schnell": "black-forest-labs/FLUX.1-schnell",
    "stable_diffusion": "stabilityai/stable-diffusion-3.5-large",
    "kandinsky": "kandinsky"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def is_subscribed(update: Update) -> bool:
    chat_id = "@AllAI_News_bot"
    user_id = update.effective_user.id

    try:
        member = await update.get_bot().get_chat_member(chat_id=chat_id, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ALL AI Other. üé®\n"
        "–Ø –º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞.\n"
        "–ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /generate, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ"
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    if not await is_subscribed(update):
        await update.message.reply_text(
            "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª [All AI News](https://t.me/AllAI_News_bot), —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
            parse_mode="Markdown"
        )
        return

    last_request = user_data.get(user_id, {}).get("last_request")
    if last_request and datetime.now() - last_request < timedelta(minutes=1):
        remaining_time = timedelta(minutes=1) - (datetime.now() - last_request)
        seconds = remaining_time.total_seconds()
        await update.message.reply_text(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(seconds)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        return

    keyboard = [
        [InlineKeyboardButton("Flux.1 Schnell üöÄ", callback_data="flux_schnell")],
        [InlineKeyboardButton("Flux.1 Dev ‚öôÔ∏è", callback_data="flux_dev")],
        [InlineKeyboardButton("Stable Diffusion üñåÔ∏è", callback_data="stable_diffusion")],
        [InlineKeyboardButton("Kandinsky üé®", callback_data="kandinsky")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
async def select_model(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]["model"] = query.data

    if query.message:
        await query.edit_message_text("–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞. ‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    user = user_data.get(user_id, {})
    if not user.get("model"):
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /generate.")
        return

    prompt = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {user['model']}, –æ–ø–∏—Å–∞–Ω–∏–µ: {prompt}")

    last_request = user.get("last_request")
    if last_request and datetime.now() - last_request < timedelta(minutes=1):
        remaining_time = timedelta(minutes=1) - (datetime.now() - last_request)
        seconds = remaining_time.total_seconds()
        await update.message.reply_text(f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {int(seconds)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")
        return

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
    user_data[user_id]["last_request"] = datetime.now()

    try:
        image_data = generate_image(user["model"], prompt)
        if image_data:
            await send_image(update, image_data,prompt)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
def generate_image(model: str, prompt: str) -> bytes:
    if model == "kandinsky":
        return generate_image_kandinsky(prompt)
    else:
        url = f"{FLUX_API_URL}{MODELS[model]}"
        headers = {"Authorization": f"Bearer {HUGGINGFACE_API_TOKEN}"}
        response = requests.post(url, headers=headers, json={"inputs": prompt}, timeout=120)
        response.raise_for_status()
        return response.content


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kandinsky
def generate_image_kandinsky(prompt: str) -> bytes:
    try:
        headers = {
            "X-Key": f"Key {KANDINSKY_API_KEY}",
            "X-Secret": f"Secret {KANDINSKY_SECRET_KEY}"
        }
        response = requests.get(f"{KANDINSKY_API_URL}key/api/v1/models", headers=headers, timeout=120)
        response.raise_for_status()
        model_id = response.json()[0]["id"]

        params = {
            "type": "GENERATE",
            "numImages": 1,
            "width": 1024,
            "height": 1024,
            "generateParams": {"query": prompt}
        }
        data = {
            "model_id": (None, model_id),
            "params": (None, json.dumps(params), "application/json")
        }
        response = requests.post(
            f"{KANDINSKY_API_URL}key/api/v1/text2image/run", headers=headers, files=data, timeout=120
        )
        response.raise_for_status()
        task_id = response.json()["uuid"]

        for _ in range(10):
            status_response = requests.get(
                f"{KANDINSKY_API_URL}key/api/v1/text2image/status/{task_id}",
                headers=headers, timeout=120
            )
            status_response.raise_for_status()
            status_data = status_response.json()

            if status_data["status"] == "DONE":
                return base64.b64decode(status_data["images"][0])
            elif status_data["status"] == "FAIL":
                return None
            time.sleep(5)
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Kandinsky: {e}")
        return None


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def send_image(update: Update, image_data: bytes, prompt: str) -> None:
    try:
        user_id = update.message.from_user.id

        duration = datetime.now() - user_data.get(user_id, {}).get("last_request", datetime.now())
        minutes, seconds = divmod(duration.total_seconds(), 60)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        file_path = f"generated_image_{user_id}.png"
        with open(file_path, "wb") as f:
            f.write(image_data)

        with open(file_path, "rb") as f:
            reply_markup = InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="redo")]])

            await update.message.reply_photo(
                photo=InputFile(f),
                caption=(
                    f"üéâ –í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n"
                    f"üñåÔ∏è –ú–æ–¥–µ–ª—å: {user_data[user_id]['model']}\n"
                    f"‚è± –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫.\n"
                    f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}"
                ),
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")



# Redo image generation
async def redo_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()
    if user_id not in user_data or "model" not in user_data[user_id] or "prompt" not in user_data[user_id]:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return

    prompt = user_data[user_id]["prompt"]
    model = user_data[user_id]["model"]

    await query.edit_message_text("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    try:
        image_data = generate_image(model, prompt)
        if image_data:
            await send_image(query, image_data, prompt)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# Main bot function
def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # HTTPX request configuration
    httpx_request = HTTPXRequest(
        read_timeout=120,
        write_timeout=120,
        connect_timeout=120
    )

    # Create the bot application
    app = Application.builder().token(API_TOKEN).request(httpx_request).build()

    # Add command and callback handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("generate", generate))
    app.add_handler(CallbackQueryHandler(select_model))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_description))
    app.add_handler(CallbackQueryHandler(redo_generation, pattern="^redo$"))

    # Start polling
    app.run_polling(timeout=120)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    app = Flask(__name__)

    @app.route("/")
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
    application = Application.builder().token(API_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate))
    application.add_handler(CallbackQueryHandler(select_model))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, process_description))

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    from threading import Thread

    def run_flask():
        app.run(host="0.0.0.0",port=5000)

    flask_thread = Thread(target=run_flask)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    application.run_polling()

